generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums as strings for SQLite compatibility (will be proper enums in PostgreSQL)
// Role: ADMIN, SALES, SUPPORT
// CustomerStatus: lead, active, churn
// ProductKind: SaaS, Platform
// SaleStatus: pending, paid, failed
// SubscriptionStatus: active, past_due, canceled
// TicketStatus: open, pending, closed

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("SALES")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sales     Sale[]
  tickets   Ticket[] @relation("TicketAssignee")
  auditLogs AuditLog[]
}

model Customer {
  id        String          @id @default(cuid())
  name      String
  email     String          @unique
  phone     String?
  status    String          @default("lead")
  joinedAt  DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  sales   Sale[]
  tickets Ticket[]
}

model Product {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  monthly     Float
  kind        String
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  sales Sale[]
}

model Sale {
  id         String     @id @default(cuid())
  customerId String
  productId  String
  userId     String?
  months     Int
  amount     Float
  status     String     @default("pending")
  soldAt     DateTime   @default(now())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  subscription Subscription?

  @@index([customerId])
  @@index([productId])
}

model Subscription {
  id               String              @id @default(cuid())
  saleId           String              @unique
  stripeId         String?
  status           String              @default("active")
  currentPeriodEnd DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  sale Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model Ticket {
  id          String       @id @default(cuid())
  customerId  String
  title       String
  description String?
  status      String       @default("open")
  assigneeId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  assignee User?   @relation("TicketAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([assigneeId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  metadata  String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([entity, entityId])
  @@index([createdAt])
} 